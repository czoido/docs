#!groovyâ€‹

String getPrevVer(String version) {
    def verTokens = version.tokenize('.')
    major = verTokens[0].toInteger()
    minor = verTokens[1].toInteger() - 1
    patch = verTokens[2].toInteger() 
    return "${major}.${minor}.${patch}"
}

String getBranchName(String version) {
    def verTokens = version.tokenize('.')
    major = verTokens[0].toInteger()
    minor = verTokens[1].toInteger()
    return "release/${major}.${minor}"
}

@NonCPS
def getConanVersion(String versionLine) {
    def versionMatch = versionLine =~ /(?:\')([\d.]+)(?:\-dev)/
    return versionMatch[0][1]
}

node('Linux') {

    def ghUserName = "czoido"
    def repoName = "docs"
    def publishDocsUrl = "https://${ghUserName}.github.io/${repoName}/"
    def docsRepo = "${ghUserName}\\/${repoName}"

    // get the default branch
    def verUrl = "https://raw.githubusercontent.com/conan-io/conan/develop/conans/__init__.py"
    def versionLine = sh(returnStdout: true, script: "curl '${verUrl}' | grep __version__").trim()
    
    // get the branch of the upcoming release
    def devConanVersion = getConanVersion(versionLine)
    def devBranch = getBranchName(devConanVersion)

    // get the branch of the latest published Conan version
    def currentConanVersion = getPrevVer(devConanVersion)
    def currentReleaseBranch = getBranchName(currentConanVersion)

    echo "---- Conan dev branch: ${devBranch}"
    echo "---- Conan release branch: ${currentReleaseBranch}"
    echo "---- Merging to branch: ${env.BRANCH_NAME}"

    boolean triggerPublish = false

    if (env.BRANCH_NAME=="${currentReleaseBranch}" || env.BRANCH_NAME=="latest") {
        triggerPublish = true
        echo "---- Will check if we have to publish"
    }
    else {
        echo "---- Branch name does not match"
    }


    stage('Clone sources') {
        checkout scm
    }

    // def image = null
    // stage('Build docker image') {
    //     image = docker.build('conan-docs', '-f .ci/Dockerfile .')  // It should cache the image
    // }

    // stage('Test build') {
    //     parallel html: {
    //         image.inside {
    //             sh 'make html'
    //         }
    //     },
    //     pdf: {
    //         image.inside {
    //             sh 'make latex'
    //         }
    //     },
    //     spelling: {
    //         image.inside {
    //             sh 'make spelling'
    //         }
    //     },
    //     linkcheck: {
    //         image.inside {
    //             int output = sh(script: 'make linkcheck', returnStatus: true)
    //             if (output != 0) {
    //                 currentBuild.result = 'FAILURE'
    //                 error('Stop here, linkcheck failed!')
    //             }
    //         }
    //     }
    // }

    def publishBranches = ""
    if (triggerPublish) {
        stage("Check if the ci should publish ${currentReleaseBranch} branch") {
            if (env.BRANCH_NAME=="latest") {
                publishBranches = "latest"
                def latest_head = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                sh "git fetch origin ${currentReleaseBranch}:${currentReleaseBranch} && git checkout ${currentReleaseBranch}"
                def diff_branches = sh(script: "git diff --name-only origin/latest..${currentReleaseBranch} | wc -l", returnStdout: true).trim() as int
                sh(script: "git diff --name-only origin/latest..${currentReleaseBranch}")
                if (diff_branches!=0) {
                    sh 'git config --global user.email "you@example.com" && git config --global user.name "Your Name" && git merge origin/latest || true'
                    def release_head = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                    sh "git diff --name-only ${latest_head}..${release_head}"
                    diff_branches = sh(script: "git diff --name-only ${latest_head}..${release_head} | wc -l", returnStdout: true).trim() as int
                    if (diff_branches==0) {
                        // Open a PR to the current release branch
                        sh 'git checkout latest'
                        withCredentials([usernamePassword(credentialsId: 'conanci-gh-token-stg', usernameVariable: 'GH_USER', passwordVariable: 'GH_TOKEN')]) {
                            sh "python .ci/create_pr.py --repo ${docsRepo} --base ${currentReleaseBranch} --head latest"
                        }
                    }
                    else {
                        echo "latest and ${currentReleaseBranch} are out of sync, won't open a PR to ${currentReleaseBranch} to merge changes"
                    }
                }
            }
            else if (env.BRANCH_NAME=="${currentReleaseBranch}") {
                def release_head = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                sh "git fetch origin latest:latest && git checkout latest"
                def diff_branches = sh(script: "git diff --name-only origin/${currentReleaseBranch}..latest | wc -l", returnStdout: true).trim() as int
                sh(script: "git diff --name-only origin/${currentReleaseBranch}..latest")
                if (diff_branches==0) {
                    sh "git config --global user.email \"you@example.com\" && git config --global user.name \"Your Name\" && git merge origin/${currentReleaseBranch} || true"
                    def latest_head = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                    sh "git diff --name-only ${latest_head}..${release_head}"
                    diff_branches = sh(script: "git diff --name-only ${latest_head}..${release_head} | wc -l", returnStdout: true).trim() as int
                    if (diff_branches==0) {
                        echo "---- Will publish the ${currentReleaseBranch}"
                        publishBranches = "${currentReleaseBranch}"
                    }
                    else {
                        echo "latest and ${currentReleaseBranch} are out of sync, won't publish ${currentReleaseBranch}"
                    }
                }
            }
        }
    }

    if (triggerPublish && publishBranches) {
        echo "---- Will publish at least ${publishBranches}"
        build(job: 'Conan-Docs-Publish', propagate: true, wait: true, parameters: [
            [$class: 'StringParameterValue', name: 'branches_to_publish', value: publishBranches],
            [$class: 'StringParameterValue', name: 'current_release_branch', value: currentReleaseBranch],
            [$class: 'StringParameterValue', name: 'prefix', value: "${publishDocsUrl}"],
            [$class: 'StringParameterValue', name: 'docs_repo', value: "${docsRepo}"],
            [$class: 'BooleanParameterValue', name: 'publish', value: true]
        ])
    }
    else {
        echo "---- Publish job will not be triggered"
    }
}
